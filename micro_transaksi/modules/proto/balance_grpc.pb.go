// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: modules/proto/balance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Balances_Show_FullMethodName           = "/Balances/Show"
	Balances_Create_FullMethodName         = "/Balances/Create"
	Balances_FindByid_FullMethodName       = "/Balances/FindByid"
	Balances_FindByidUser_FullMethodName   = "/Balances/FindByidUser"
	Balances_Update_FullMethodName         = "/Balances/Update"
	Balances_UpdateByServer_FullMethodName = "/Balances/UpdateByServer"
	Balances_Delete_FullMethodName         = "/Balances/Delete"
)

// BalancesClient is the client API for Balances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalancesClient interface {
	Show(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	Create(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	FindByid(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	FindByidUser(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	Update(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	UpdateByServer(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
	Delete(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error)
}

type balancesClient struct {
	cc grpc.ClientConnInterface
}

func NewBalancesClient(cc grpc.ClientConnInterface) BalancesClient {
	return &balancesClient{cc}
}

func (c *balancesClient) Show(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) Create(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) FindByid(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_FindByid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) FindByidUser(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_FindByidUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) Update(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) UpdateByServer(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_UpdateByServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancesClient) Delete(ctx context.Context, in *Balance, opts ...grpc.CallOption) (*ResponseBalance, error) {
	out := new(ResponseBalance)
	err := c.cc.Invoke(ctx, Balances_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalancesServer is the server API for Balances service.
// All implementations must embed UnimplementedBalancesServer
// for forward compatibility
type BalancesServer interface {
	Show(context.Context, *Balance) (*ResponseBalance, error)
	Create(context.Context, *Balance) (*ResponseBalance, error)
	FindByid(context.Context, *Balance) (*ResponseBalance, error)
	FindByidUser(context.Context, *Balance) (*ResponseBalance, error)
	Update(context.Context, *Balance) (*ResponseBalance, error)
	UpdateByServer(context.Context, *Balance) (*ResponseBalance, error)
	Delete(context.Context, *Balance) (*ResponseBalance, error)
	mustEmbedUnimplementedBalancesServer()
}

// UnimplementedBalancesServer must be embedded to have forward compatible implementations.
type UnimplementedBalancesServer struct {
}

func (UnimplementedBalancesServer) Show(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedBalancesServer) Create(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBalancesServer) FindByid(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByid not implemented")
}
func (UnimplementedBalancesServer) FindByidUser(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByidUser not implemented")
}
func (UnimplementedBalancesServer) Update(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBalancesServer) UpdateByServer(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByServer not implemented")
}
func (UnimplementedBalancesServer) Delete(context.Context, *Balance) (*ResponseBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBalancesServer) mustEmbedUnimplementedBalancesServer() {}

// UnsafeBalancesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalancesServer will
// result in compilation errors.
type UnsafeBalancesServer interface {
	mustEmbedUnimplementedBalancesServer()
}

func RegisterBalancesServer(s grpc.ServiceRegistrar, srv BalancesServer) {
	s.RegisterService(&Balances_ServiceDesc, srv)
}

func _Balances_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).Show(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).Create(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_FindByid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).FindByid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_FindByid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).FindByid(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_FindByidUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).FindByidUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_FindByidUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).FindByidUser(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).Update(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_UpdateByServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).UpdateByServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_UpdateByServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).UpdateByServer(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balances_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Balance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Balances_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancesServer).Delete(ctx, req.(*Balance))
	}
	return interceptor(ctx, in, info, handler)
}

// Balances_ServiceDesc is the grpc.ServiceDesc for Balances service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Balances_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Balances",
	HandlerType: (*BalancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _Balances_Show_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Balances_Create_Handler,
		},
		{
			MethodName: "FindByid",
			Handler:    _Balances_FindByid_Handler,
		},
		{
			MethodName: "FindByidUser",
			Handler:    _Balances_FindByidUser_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Balances_Update_Handler,
		},
		{
			MethodName: "UpdateByServer",
			Handler:    _Balances_UpdateByServer_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Balances_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/proto/balance.proto",
}
