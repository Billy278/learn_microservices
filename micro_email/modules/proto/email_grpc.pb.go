// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: modules/proto/email.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmailSrv_SendEmail_FullMethodName = "/EmailSrv/SendEmail"
)

// EmailSrvClient is the client API for EmailSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSrvClient interface {
	SendEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
}

type emailSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSrvClient(cc grpc.ClientConnInterface) EmailSrvClient {
	return &emailSrvClient{cc}
}

func (c *emailSrvClient) SendEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EmailSrv_SendEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSrvServer is the server API for EmailSrv service.
// All implementations must embed UnimplementedEmailSrvServer
// for forward compatibility
type EmailSrvServer interface {
	SendEmail(context.Context, *Email) (*Response, error)
	mustEmbedUnimplementedEmailSrvServer()
}

// UnimplementedEmailSrvServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSrvServer struct {
}

func (UnimplementedEmailSrvServer) SendEmail(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailSrvServer) mustEmbedUnimplementedEmailSrvServer() {}

// UnsafeEmailSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSrvServer will
// result in compilation errors.
type UnsafeEmailSrvServer interface {
	mustEmbedUnimplementedEmailSrvServer()
}

func RegisterEmailSrvServer(s grpc.ServiceRegistrar, srv EmailSrvServer) {
	s.RegisterService(&EmailSrv_ServiceDesc, srv)
}

func _EmailSrv_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSrvServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailSrv_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSrvServer).SendEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSrv_ServiceDesc is the grpc.ServiceDesc for EmailSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmailSrv",
	HandlerType: (*EmailSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailSrv_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/proto/email.proto",
}
